name: manual release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
      latest:
        description: 'Mark as latest release?'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      prerelease:
        description: 'Is this a pre-release?'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-24.04

    name: Release ${{ inputs.version }}

    outputs:
      version: ${{ steps.version.outputs.version }}
      notes: ${{ steps.cleaned-notes.outputs.notes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}

      - name: Remove optional "v" prefix
        id: version
        run: |
          echo "version=${VERSION#v}" >> "$GITHUB_OUTPUT"
        env:
          VERSION: ${{ inputs.version }}

      - name: Check if branch and version match
        id: guard
        run: |
          MAJOR_VERSION="${NUMERIC_VERSION%%.*}"
          BRANCH_MAJOR_VERSION="${BRANCH%%.*}"

          if [ "$MAJOR_VERSION" != "$BRANCH_MAJOR_VERSION" ]; then
            echo "Mismatched versions! Aborting."
            VERSION_MISMATCH='true';
          else
            echo "Versions match! Proceeding."
            VERSION_MISMATCH='false';
          fi

          echo "VERSION_MISMATCH=$(echo $VERSION_MISMATCH)" >> "$GITHUB_OUTPUT";
        env:
          BRANCH: ${{ github.ref_name }}
          NUMERIC_VERSION: ${{ steps.version.outputs.version }}

      - name: Fail if branch and release tag do not match
        if: ${{ steps.guard.outputs.VERSION_MISMATCH == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('Workflow failed. Release version does not match with selected target branch. Did you select the correct branch?')

      - name: Update config/app.php
        run: sed -i "s/'version' => '[^']*'/'version' => '${{ steps.version.outputs.version }}'/" config/app.php

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: bcmath, ctype, fileinfo, json, mbstring, openssl, pdo, tokenizer, xml, gd, zip, sqlite3
          coverage: none

      - name: Install Composer Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install NPM Dependencies
        run: npm install --force

      - name: Build assets
        run: npm run build

      # Release
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Build version ${{ steps.version.outputs.version }}"

      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body: ${{ steps.cleaned-notes.outputs.notes }}
          target_commitish: ${{ github.ref_name }}
          make_latest: ${{ inputs.latest == 'true' }}
          prerelease: ${{ inputs.prerelease == 'true' }}
          generate_release_notes: true

      - name: Verify GitHub CLI
        run: gh --version

      - name: Get release notes from GitHub API
        id: fetch-release
        run: |
          NOTES=$(gh release view ${{ steps.version.outputs.version }} --json body -q .body)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send release notes to Discord
        run: |
          DISCORD_MESSAGE=$(printf "**coamifee ${{ steps.version.outputs.version }}** is out! ðŸŽ‰ðŸš€\n\`\`\`\n%s\n\`\`\`" "${{ steps.fetch-release.outputs.notes }}")
          PAYLOAD=$(jq -n --arg content "$DISCORD_MESSAGE" '{content: $content}')
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$PAYLOAD" \
            "$DISCORD_WEBHOOK_URL"
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
